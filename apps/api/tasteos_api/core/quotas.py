"""
Quota management for usage-based billing.

This module provides helpers for enforcing daily/monthly quotas
on features like variant generation.
"""

from datetime import datetime, timedelta
from uuid import UUID

from sqlmodel import select
from sqlmodel.ext.asyncio.session import AsyncSession

from tasteos_api.models.subscription import Subscription
from tasteos_api.models.variant_usage import VariantUsage
from tasteos_api.models.user import User


# Daily quota limits per plan
DAILY_VARIANT_QUOTAS = {
    "free": 3,
    "pro": 30,
    "enterprise": 60,
}


async def get_daily_variant_usage(user_id: UUID, session: AsyncSession) -> int:
    """Get the number of variants generated by user in the last 24 hours.

    Uses a rolling 24-hour window to avoid edge cases where users
    can't generate variants at 12:01am despite quota reset.
    """
    now = datetime.utcnow()
    twenty_four_hours_ago = now - timedelta(hours=24)

    result = await session.execute(
        select(VariantUsage)
        .where(VariantUsage.user_id == user_id)
        .where(VariantUsage.created_at >= twenty_four_hours_ago)
    )
    usage_records = result.scalars().all()
    return len(usage_records)


async def check_variant_quota(user: User, session: AsyncSession) -> dict:
    """Check if user can generate more variants today.

    Returns:
        dict with 'allowed', 'used', 'limit', and 'remaining' keys
    """
    # Get user's subscription to determine plan
    result = await session.execute(
        select(Subscription).where(Subscription.user_id == user.id)
    )
    subscription = result.scalar_one_or_none()

    plan = subscription.plan if subscription else "free"
    limit = DAILY_VARIANT_QUOTAS.get(plan, DAILY_VARIANT_QUOTAS["free"])

    used = await get_daily_variant_usage(user.id, session)
    remaining = max(0, limit - used)
    allowed = remaining > 0

    return {
        "allowed": allowed,
        "used": used,
        "limit": limit,
        "remaining": remaining,
        "plan": plan
    }


async def record_variant_usage(
    user_id: UUID,
    recipe_id: UUID,
    variant_type: str,
    session: AsyncSession
) -> None:
    """Record a variant generation event for usage tracking."""
    usage_record = VariantUsage(
        user_id=user_id,
        recipe_id=recipe_id,
        variant_type=variant_type
    )
    session.add(usage_record)
    await session.commit()
